name: Test

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TEST_JOB_PARALLEL_COUNT: 2
  RAILS_ENV: test

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      actions: read
    strategy:
      fail-fast: false
      matrix:
        test_job_index: [0, 1]
    env:
      DD_CIVISIBILITY_AGENTLESS_ENABLED: true
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
      DD_SITE: ${{ secrets.DD_SITE }}
      DD_ENV: ci
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Download previous test result
        uses: actions/download-artifact@v4
        with:
          pattern: test-result-${{ matrix.test_job_index }}
          path: ${{ runner.temp }}
      - name: Place previous test result
        id: previous-test-result
        env:
          TEST_RESULT_DIR: ${{ runner.temp }}/test-result-${{ matrix.test_job_index }}
        run: |
          if [ -f ${TEST_RESULT_DIR}/spec/examples.txt ]; then
            mv ${TEST_RESULT_DIR}/spec/examples.txt spec/examples.txt
            echo "failed-tests-only=true" >> $GITHUB_OUTPUT
          fi
          suffix="_`date +%s`"
          mkdir -p test_results coverage
          if [ -e ${TEST_RESULT_DIR}/test_results ]; then
            mv ${TEST_RESULT_DIR}/test_results/* test_results/
            find test_results -type f -name "*.xml" | sed "p;s/.xml/${suffix}.xml/" | xargs -n2 mv
            bundle exec rails runner "Dir['test_results/**/*.xml'].each { |path| File.write(path, Nokogiri(File.read(path)).tap { _1.css('testcase:has(failure)').remove }.to_s) }"
          fi
          if [ -e ${TEST_RESULT_DIR}/coverage ]; then
            mv ${TEST_RESULT_DIR}/coverage/.resultset*.json coverage/
            find coverage -type f -name "*.json" | sed "p;s/.json/${suffix}.json/" | xargs -n2 mv
          fi
      - name: Setup DB
        run: bundle exec rails "parallel:setup[`nproc`]"
      - name: Download all test results for default branch
        if: ${{ !steps.previous-test-result.outputs.failed-tests-only }}
        uses: dawidd6/action-download-artifact@v6
        with:
          name: test-result-*
          name_is_regexp: true
          path: ${{ runner.temp }}/default-branch-test-results
          branch: ${{ github.event.repository.default_branch }}
          workflow_conclusion: success
          if_no_artifact_found: warn
      - name: Split tests by timings
        if: ${{ !steps.previous-test-result.outputs.failed-tests-only }}
        uses: r7kamura/split-tests-by-timings@v0
        id: split-tests
        with:
          reports: ${{ runner.temp }}/default-branch-test-results/**/test_results
          glob: spec/**/*_spec.rb
          index: ${{ matrix.test_job_index }}
          total: ${{ env.TEST_JOB_PARALLEL_COUNT }}
      - name: Run rspec in parallel
        if: ${{ !steps.previous-test-result.outputs.failed-tests-only }}
        run: bundle exec parallel_rspec -n `nproc` ${{ steps.split-tests.outputs.paths }}
      - name: Re-run rspec only failures
        if: ${{ steps.previous-test-result.outputs.failed-tests-only }}
        run: bundle exec rspec --only-failures
      - name: Upload test result
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-result-${{ matrix.test_job_index }}
          path: |
            test_results/
            spec/examples.txt
            coverage/.resultset*.json
          include-hidden-files: true
          if-no-files-found: ignore

  report-coverage:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      pull-requests: write
    if: ${{ success() || failure() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-result-*
          path: ${{ runner.temp }}/test-results
      - name: Aggregate all coverage resultsets
        run: bundle exec rails runner "require 'simplecov'; SimpleCov.collate(Dir['${{ runner.temp }}/test-results/**/coverage/.resultset*.json'], 'rails')"
      - name: Report coverage by octocov
        uses: k1LoW/octocov-action@v1
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          include-hidden-files: true

  report-failed-tests:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    continue-on-error: true
    permissions:
      contents: read
      pull-requests: write
    if: ${{ success() || failure() }}
    env:
      REVIEWDOG_JSON_FILE_NAME: rspec_reviewdog.jsonl
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: v0.20.0
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-result-*
          path: ${{ runner.temp }}/test-results
      - name: Generate RSspec reviewdog json
        env:
          JUNIT_XML_FILE_PATH_PATTERN: ${{ runner.temp }}/test-results/**/test_results/*.xml
          REVIEWDOG_JSON_FILE_PATH: ${{ runner.temp }}/${{ env.REVIEWDOG_JSON_FILE_NAME }}
        run: bundle exec ruby scripts/generate_rspec_reviewdog_json.rb
      - name: Run rspec reviewdog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
          REVIEWDOG_JSON_FILE_PATH: ${{ runner.temp }}/${{ env.REVIEWDOG_JSON_FILE_NAME }}
        run: |
          cat $REVIEWDOG_JSON_FILE_PATH | reviewdog -f=rdjsonl -reporter=github-check

  report-test-summary:
    needs: test
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    continue-on-error: true
    permissions:
      contents: read
      pull-requests: write
      actions: read
    if: ${{ (success() || failure()) && format('refs/heads/{0}', github.event.repository.default_branch) == github.ref }}
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-result-*
          path: ${{ runner.temp }}/test-results
      - name: Merge JUnit XMLs
        run: npx --yes junit-report-merger ${{ runner.temp }}/merged_rspec.xml "${{ runner.temp }}/test-results/**/test_results/*.xml"
      - name: Upload merged JUnit XML
        uses: actions/upload-artifact@v4
        with:
          name: merged_rspec
          path: ${{ runner.temp }}/merged_rspec.xml
      - name: Download last 5 merged JUnit XMLs for default branch
        working-directory: ${{ runner.temp }}
        run: |
          mkdir merged_rspecs artifacts
          gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/${GITHUB_REPOSITORY}/actions/runs?branch=${{ github.event.repository.default_branch }}&per_page=5" | \
            jq -r '.workflow_runs[] | .id' | \
            while read run_id; do
              gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${GITHUB_REPOSITORY}/actions/runs/${run_id}/artifacts | \
                jq -r '.artifacts[] | select(.name == "merged_rspec") | .id' | \
                while read artifact_id; do
                  gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${GITHUB_REPOSITORY}/actions/artifacts/${artifact_id}/zip > artifacts/${artifact_id}.zip && \
                  unzip artifacts/$artifact_id.zip -d merged_rspecs/${artifact_id}
                done
            done
      - name: Generate test summary JUnit XML
        env:
          JUNIT_XML_FILE_PATH_PATTERN: ${{ runner.temp }}/merged_rspecs/**/*.xml
        run: |
          bundle exec ruby scripts/generate_test_summary_junit_xml.rb > ${{ runner.temp }}/test_summary.xml
      - name: Report test summary
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: ${{ runner.temp }}/test_summary.xml
          check_name: RSpec
          summary: true
          flaky_summary: true
          comment: true

  build-github-pages:
    needs: report-coverage
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ format('refs/heads/{0}', github.event.repository.default_branch) == github.ref }}
    steps:
      - name: Download coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: coverage

  deploy-github-pages:
    needs: build-github-pages
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ format('refs/heads/{0}', github.event.repository.default_branch) == github.ref }}
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

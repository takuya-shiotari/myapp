name: Test

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CI_NODE_TOTAL: 2
  CI_NODE_CPU_CORES: 2
  RAILS_ENV: test

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      actions: read
    strategy:
      fail-fast: false
      matrix:
        ci_node_index: [0, 1]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Download previous test result
        uses: actions/download-artifact@v4
        with:
          pattern: test-result-${{ matrix.ci_node_index }}
          path: ${{ runner.temp }}
      - name: Place previous test result
        id: previous-test-result
        run: |
          if [ ! -e ${{ runner.temp }}/test-result-${{ matrix.ci_node_index }}/test_results ]; then
            exit 0
          fi
          echo "failed-tests-only=true" >> $GITHUB_OUTPUT
          if [ -f ${{ runner.temp }}/test-result-${{ matrix.ci_node_index }}/spec/examples.txt ]; then
            mv ${{ runner.temp }}/test-result-${{ matrix.ci_node_index }}/spec/examples.txt spec/examples.txt
            sudo chown runner:runner spec/examples.txt
          fi
          if [ -e ${{ runner.temp }}/test-result-${{ matrix.ci_node_index }}/test_results ]; then
            mkdir -p test_results
            mv ${{ runner.temp }}/test-result-${{ matrix.ci_node_index }}/test_results/* test_results/
            find test_results -type f -name "*.xml" | sed 'p;s/.xml/_prev.xml/' | xargs -n2 mv
            bundle exec rails runner "Dir.glob('test_results/**/*.xml').each { |path| File.write(path, Nokogiri(File.read(path)).tap { _1.css('testcase:has(failure)').remove }.to_s) }"
          fi
          if [ -e ${{ runner.temp }}/test-result-${{ matrix.ci_node_index }}/coverage ]; then
            mkdir -p coverage
            mv ${{ runner.temp }}/test-result-${{ matrix.ci_node_index }}/coverage/* coverage/
            find coverage -type f -name "*.json" | sed 'p;s/.json/_prev.json/' | xargs -n2 mv
          fi
      - name: Download all test results for default branch
        if: ${{ !steps.previous-test-result.outputs.failed-tests-only }}
        uses: dawidd6/action-download-artifact@v5
        with:
          name: test-result-[0-9]+
          name_is_regexp: true
          path: ${{ runner.temp }}/default-branch-test-results
          branch: ${{ github.event.repository.default_branch }}
          workflow_conclusion: success
        continue-on-error: true
      - name: Split tests by timings
        if: ${{ !steps.previous-test-result.outputs.failed-tests-only }}
        uses: r7kamura/split-tests-by-timings@v0
        id: split-tests
        with:
          reports: ${{ runner.temp }}/default-branch-test-results/**/test_results
          glob: spec/**/*_spec.rb
          index: ${{ matrix.ci_node_index }}
          total: ${{ env.CI_NODE_TOTAL }}
      - name: Setup DB
        run: bundle exec rails "parallel:setup[${CI_NODE_CPU_CORES}]"
      - name: Run rspec in parallel
        if: ${{ !steps.previous-test-result.outputs.failed-tests-only }}
        run: bundle exec parallel_rspec -n $CI_NODE_CPU_CORES ${{ steps.split-tests.outputs.paths }}
      - name: Re-run rspec only failures
        if: ${{ steps.previous-test-result.outputs.failed-tests-only }}
        run: bundle exec rspec --only-failures
      - name: Upload test result
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-result-${{ matrix.ci_node_index }}
          path: |
            spec/examples.txt
            test_results/
            coverage/.resultset*.json
          include-hidden-files: true
          if-no-files-found: ignore

  report-coverage:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      pull-requests: write
    if: success() || failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-result-*
          path: ${{ runner.temp }}/test-results
      - name: Aggregate all coverage resultsets
        run: bundle exec rails runner "require 'simplecov'; SimpleCov.collate(Dir['${{ runner.temp }}/test-results/**/coverage/.resultset*.json'], 'rails')"
      - name: Coverage Report by octocov
        uses: k1LoW/octocov-action@v1
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

  report-failed-tests:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    continue-on-error: true
    permissions:
      contents: read
      pull-requests: write
    if: success() || failure()
    env:
      REVIEWDOG_JSON_FILE_NAME: rspec_reviewdog.jsonl
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: v0.20.0
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-result-*
          path: ${{ runner.temp }}/test-results
      - name: Generate RSspec reviewdog json
        env:
          JUNIT_XML_FILE_PATH_PATTERN: ${{ runner.temp }}/test-results/**/test_results/*.xml
          REVIEWDOG_JSON_FILE_PATH: ${{ runner.temp }}/${{ env.REVIEWDOG_JSON_FILE_NAME }}
        run: bundle exec ruby scripts/generate_rspec_reviewdog_json.rb
      - name: Run rspec reviewdog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
          REVIEWDOG_JSON_FILE_PATH: ${{ runner.temp }}/${{ env.REVIEWDOG_JSON_FILE_NAME }}
        run: |
          cat $REVIEWDOG_JSON_FILE_PATH | reviewdog -f=rdjsonl -reporter=github-check
